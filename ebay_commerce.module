<?php

/**
 * eBay commerce module
 */



/**
 * Implements hook_permission().
 */

function ebay_commerce_permission() {

  return array(
    'administer ebay' => array(
    'title' => t('Administer ebay'),
    'description' => t('Administer ebay settings'),
    ),

    'end ebay items' => array(
    'title' => t('End ebay items'),
    'description' => t('Allow users to end ebay items'),
    ),

    'post ebay items' => array(
    'title' => t('Post ebay items'),
    'description' => t('Allow users to post ebay items'),
    ),
  );

}


/**
 *  Define constants
 *
 * I store user data in variables for easy development.
 * Should be stored in the database and be secured.
 *
 * TODO : Store user data in DB and secure user credentials.
 *
 */

  define('EBAY_MODE', variable_get('ebay_settings_mode'));
  define('EBAY_API', variable_get('ebay_settings_api'));
  define('EBAY_SITE', variable_get('ebay_settings_site_id'));
  define('EBAY_CURRENCY', variable_get('ebay_settings_currency'));
  define('EBAY_COUNTRY', variable_get('ebay_settings_country'));
  define('EBAY_ERRORLANGUAGE', variable_get('ebay_settings_errorlanguage'));
  define('EBAY_WARNINGLEVEL', variable_get('ebay_settings_warninglevel'));
  define('EBAY_INVENTORY_TRACKING', variable_get('ebay_settings_inventory_tracking'));
  define('EBAY_CONDITION', variable_get('ebay_settings_condition_id'));

  // Check Mode Sandbox Or Production
  if (EBAY_MODE == 'production') {
    // production environment
    define('EBAY_DEVELOPER_ID', variable_get('ebay_admin_production_dev_id'));
    define('EBAY_APPLICATION_ID', variable_get('ebay_admin_production_app_id'));
    define('EBAY_CERT_ID', variable_get('ebay_admin_production_cert_id'));
    define('EBAY_SERVER_URL', variable_get('ebay_admin_production_url'));
    define('EBAY_USER_TOKEN', variable_get('ebay_admin_production_usertoken'));
    define('EBAY_USER_PAYPAL', variable_get('ebay_admin_production_paypal_id'));
  }
  else {
  // sandbox (test) environment
    define('EBAY_DEVELOPER_ID', variable_get('ebay_admin_sandbox_dev_id'));
    define('EBAY_APPLICATION_ID', variable_get('ebay_admin_sandbox_app_id'));
    define('EBAY_CERT_ID', variable_get('ebay_admin_sandbox_cert_id'));
    define('EBAY_SERVER_URL', variable_get('ebay_admin_sandbox_url'));
    define('EBAY_USER_TOKEN', variable_get('ebay_admin_sandbox_usertoken'));
    define('EBAY_USER_PAYPAL', variable_get('ebay_admin_sandbox_paypal_id'));
  }


/**
 * Checks for errors returned by eBay.
 *
 * @param $responseDoc
 *   Data returned by eBay.
 * @return
 *   True or Empty
 *
 * @code
 * $error = ebay_commerce_error_check($responseDoc);
 *  if(!$error) {
 *    // Code here
 *  }
 * @endcode
 *
 * See : function ebay_commerce_action()
 */
function ebay_commerce_error_check($responseDoc){

  $errors = $responseDoc->getElementsByTagName('Errors');

  if($errors->length > 0) {

    //Get error code, ShortMesaage and LongMessage
    $code = $errors->item(0)->getElementsByTagName('ErrorCode');
    $shortMsg = $errors->item(0)->getElementsByTagName('ShortMessage');
    $longMsg = $errors->item(0)->getElementsByTagName('LongMessage');

    $url = 'http://developer.ebay.com/devzone/xml/docs/reference/ebay/errors/errormessages.htm';

    //Display code and shortmessage
    $msg  = 'There were errors: <b>'  . $shortMsg->item(0)->nodeValue . '</b></br>';
    $msg .= 'eBay returned: <b>ErrorCode ' . $code->item(0)->nodeValue . '</b></br>';
    $msg .= 'eBay returned the following Message: <b>' . $longMsg->item(0)->nodeValue . '</b></br>';
    $msg .= '<a href=' . $url .' target="_blank">See error numbers</a>';

    drupal_set_message(t($msg), 'error');

    return TRUE;
  }

} // End function

/**
 * Creates a call/action to eBay.
 *
 * @return
 *   eBay record
 */
function ebay_commerce_action($action , $xml = NULL){

  $request = $action . 'Request';
  $responce = $action . 'Response';

  // Build XML data and POST it to eBay

  //Build the request Xml string
  $requestXmlBody = '<?xml version="1.0" encoding="utf-8"?>';
  $requestXmlBody .= '<' . $request . ' xmlns="urn:ebay:apis:eBLBaseComponents">';
  $requestXmlBody .= '<RequesterCredentials><eBayAuthToken>' . EBAY_USER_TOKEN . '</eBayAuthToken></RequesterCredentials>';
  $requestXmlBody .= '<ErrorLanguage>' . EBAY_ERRORLANGUAGE . '</ErrorLanguage>';
  $requestXmlBody .= '<WarningLevel>' . EBAY_WARNINGLEVEL . '</WarningLevel>';
  $requestXmlBody .= $xml;
  $requestXmlBody .= '</' . $request . '>';

  dsm($requestXmlBody);

  //Create a new eBay session
  $session = new eBaySession(
    EBAY_USER_TOKEN,
    EBAY_DEVELOPER_ID,
    EBAY_APPLICATION_ID,
    EBAY_CERT_ID,
    EBAY_SERVER_URL,
    EBAY_API,
    EBAY_SITE,
    $action
  );

  // send the request and get response
  $responseXml = $session->sendHttpRequest($requestXmlBody);

  // if no connection possible end request.
  if(stristr($responseXml, 'HTTP 404') || $responseXml == ''){
    drupal_set_message(t('Error sending request'), 'error');
    //die;
    return;
  }

  // Xml string is parsed and creates a DOM Document object
  $responseDoc = new DomDocument();
  $responseDoc->loadXML($responseXml);

  // Error check
  $error = ebay_commerce_error_check($responseDoc);

  if(!$error) {
    $responses = $responseDoc->getElementsByTagName($responce);
    return $responses;
  }

} // End function


/**
 * Get time from the eBay server.
 *
 * Can alse be used to check for connection with eBay server
 * before performing any action like uploading a product.
 * Should only be called once per session because eBay has a connection limit.
 *
 * @return
 *   Time from eBay server in array.
 *
 * @code
 * $ebay = ebay_commerce_get_time();
 *  if($time) {
 *    print $ebay->time_raw;
 *    print $ebay->time_format;
 *  }
 * @endcode
 */
function ebay_commerce_get_time(){

  $record = ebay_commerce_action('GeteBayOfficialTime');
  if($record){
    foreach ($record as $response) {
      $variable = $response->getElementsByTagName('Timestamp');
      $baytime = strtotime($variable->item(0)->nodeValue);
      $baytime_formatted = format_date($baytime,'custom', 'F j, Y - H:i');

      $ebay_response = new stdClass();
      $ebay_response->time_raw = $baytime;
      $ebay_response->time_format = $baytime_formatted;
    }
    return $ebay_response;
  }
} // End function


/**
 * Test function for uploading a product as a fixed price item to eBay.
 * AddFixedPriceItem.
 * Used for testing and debugging.
 *
 * See : http://developer.ebay.com/devzone/xml/docs/reference/ebay/AddFixedPriceItem.html
 */
function ebay_commerce_test_upload(){

  // Build some values for testing
  $inventorytracking = EBAY_INVENTORY_TRACKING;
  $sku = rand();
  $title = random_title(20);
  $lorum =  file_get_contents('http://loripsum.net/api'); // Generate dummy from http://loripsum.net/
  $description = utf8_encode("<![CDATA[ " . $lorum . " ]]>");
  $ebay_category = '88433';
  $price = rand(1,1000);
  $image = 'http://lorempixel.com/400/200/'; //http://dummyimage.com/300.png/09f/fff

  // Create XMl data for uplaod.
  $requestXmlBody = "<Item>";
  $requestXmlBody .= "<InventoryTrackingMethod>$inventorytracking</InventoryTrackingMethod>";
  $requestXmlBody .= "<SKU>$sku</SKU>";
  $requestXmlBody .= "<Title>$title</Title>";
  $requestXmlBody .= "<Description>$description</Description>";
  $requestXmlBody .= "<PrimaryCategory><CategoryID>$ebay_category</CategoryID></PrimaryCategory>";
  $requestXmlBody .= "<StartPrice>$price</StartPrice>";
  $requestXmlBody .= "<Country>" . EBAY_COUNTRY ."</Country>";
  $requestXmlBody .= "<Currency>" . EBAY_CURRENCY . "</Currency>";
  $requestXmlBody .= "<DispatchTimeMax>1</DispatchTimeMax>";
  $requestXmlBody .= "<ListingDuration>GTC</ListingDuration>";
  $requestXmlBody .= "<ListingType>FixedPriceItem</ListingType>";
  $requestXmlBody .= "<PaymentMethods>PayPal</PaymentMethods>";
  $requestXmlBody .= "<PayPalEmailAddress>" . EBAY_USER_PAYPAL . "</PayPalEmailAddress>";
  $requestXmlBody .= "<PictureDetails>";
  $requestXmlBody .= "<PictureURL>$image</PictureURL>";
  $requestXmlBody .= "</PictureDetails>";
  $requestXmlBody .= "<PostalCode>95125</PostalCode>";
  $requestXmlBody .= "<Quantity>1</Quantity>";

  $requestXmlBody .= "<ReturnPolicy><ReturnsAcceptedOption>ReturnsAccepted</ReturnsAcceptedOption>";
  $requestXmlBody .= "<ReturnsWithinOption>Days_14</ReturnsWithinOption>";
  $requestXmlBody .= "<Description>If you are not satisfied, return the item for refund.</Description>";
  $requestXmlBody .= "<ShippingCostPaidByOption>Buyer</ShippingCostPaidByOption>";
  $requestXmlBody .= "</ReturnPolicy>";

  $requestXmlBody .= "<ShippingDetails>";
  $requestXmlBody .= "<ShippingType>Flat</ShippingType>";
  $requestXmlBody .= "<ShippingServiceOptions>";
  $requestXmlBody .= "<ShippingServicePriority>1</ShippingServicePriority>";
  $requestXmlBody .= "<ShippingService>UPSGround</ShippingService>";
  $requestXmlBody .= "<ShippingServiceAdditionalCost>0.00</ShippingServiceAdditionalCost>";
  $requestXmlBody .= "<FreeShipping>true</FreeShipping>";
  $requestXmlBody .= "</ShippingServiceOptions>";
  $requestXmlBody .= "</ShippingDetails>";

  $requestXmlBody .= "<Site>" . EBAY_COUNTRY . "</Site>";
  $requestXmlBody .= "</Item>";

  // Create and execute uplaod.
  $record = ebay_commerce_action('AddFixedPriceItem', $requestXmlBody);

}


/**
 * Generates a random title for testing only.
 * Copy code from devel generate module.
 */
function random_title($length) {
   mt_srand((double)microtime()*1000000);

  $vowels = array("a", "e", "i", "o", "u");
  $cons = array("b", "c", "d", "g", "h", "j", "k", "l", "m", "n", "p", "r", "s", "t", "u", "v", "w", "tr",
  "cr", "br", "fr", "th", "dr", "ch", "ph", "wr", "st", "sp", "sw", "pr", "sl", "cl", "sh");

  $num_vowels = count($vowels);
  $num_cons = count($cons);
  $word = '';

  while(strlen($word) < $length){
    $word .= $cons[mt_rand(0, $num_cons - 1)] . $vowels[mt_rand(0, $num_vowels - 1)];
  }

  return substr($word, 0, $length);
}


