<?php

/**
 * @file
 * Load values from eBay and insert them in the database.
 *
 * - Site information.
 * - Country information.
 * - Currency information
 * - URL information
 * - User information.
 */

/**
 * Support function used for development.
 *
 * @return array string
 *    Short list of settings.
 */
function ebay_commerce_build_array() {
  $ebay['ebay'] = array(
    'user' => ebay_commerce_get_user(),
    'country' => ebay_commerce_get_country(),
    'currency' => ebay_commerce_get_currency(),
    'site' => ebay_commerce_get_site(),
    'urls' => ebay_commerce_get_url(),
  );
  return $ebay;
}

/**
 * Retrieves the current list of eBay SiteDetails.
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/extra/GtByDtls.Rqst.DtlNm.html @endlink
 * @code
 * $result = ebay_commerce_get_site();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return DOMElement
 *     Site details.
 */
function ebay_commerce_get_site() {
  $xml = '<DetailName>SiteDetails</DetailName>';
  $record = new EbayCommerceLoad('GeteBayDetails', $xml, 'SiteDetails');
  $element = $record->eBayElement('SiteID', 'Site');
  return $element;
}

/**
 * Retrieves the current list of eBay CountryDetails.
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/extra/GtByDtls.Rqst.DtlNm.html @endlink
 * @code
 * $result = ebay_commerce_get_country();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return DOMElement
 *    Country details.
 */
function ebay_commerce_get_country() {
  $xml = '<DetailName>CountryDetails</DetailName>';
  $record = new EbayCommerceLoad('GeteBayDetails', $xml, 'CountryDetails');
  $element = $record->eBayElement('Country', 'Description');
  return $element;
}

/**
 * Retrieves the current list of eBay CurrencyDetails.
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/extra/GtByDtls.Rqst.DtlNm.html @endlink
 * @code
 * $result = ebay_commerce_get_currency();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return DOMElement
 *     Currency details.
 */
function ebay_commerce_get_currency() {
  $xml = '<DetailName>CurrencyDetails</DetailName>';
  $record = new EbayCommerceLoad('GeteBayDetails', $xml, 'CurrencyDetails');
  $element = $record->eBayElement('Currency', 'Description');
  return $element;
}

/**
 * Retrieves the current list of eBay CurrencyDetails.
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/extra/GtByDtls.Rqst.DtlNm.html @endlink
 * @code
 * $result = ebay_commerce_get_url();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return DOMElement
 *    URL details.
 */
function ebay_commerce_get_url() {
  $xml = '<DetailName>URLDetails</DetailName>';
  $record = new EbayCommerceLoad('GeteBayDetails', $xml, 'URLDetails');
  $element = $record->eBayElement('URLType', 'URL');
  return $element;
}

/**
 * Retrieve user information eBay GetUser.
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetUser.html @endlink
 * @code
 * $result = ebay_commerce_get_user();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return DOMElement
 *    User details.
 */
function ebay_commerce_get_user() {
  $xml = '<UserID>' . EBAY_COMMERCE_USER_ID . '</UserID>';
  $record = new EbayCommerceLoadUser('GetUser', $xml, 'User');
  $user = $record->eBayUser('UserID');
  return $user;
}

/**
 * Save eBay site information.
 */
function ebay_commerce_save_site() {

  $values = ebay_commerce_get_site();

  foreach ($values as $key => $value) {

    $query = db_merge('ebay_commerce_sites')
      ->key(array('siteid' => $values[$key]['siteid']))
      ->fields((array) $values[$key]);

    try {
      $query->execute();
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage());
    }
  }

}

/**
 * Save eBay country information.
 */
function ebay_commerce_save_country() {

  $values = ebay_commerce_get_country();

  foreach ($values as $key => $value) {

    $query = db_merge('ebay_commerce_country')
      ->key(array('country' => $values[$key]['country']))
      ->fields((array) $values[$key]);

    try {
      $query->execute();
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage());
    }
  }

}

/**
 * Save eBay currency information.
 */
function ebay_commerce_save_currency() {

  $values = ebay_commerce_get_currency();

  foreach ($values as $key => $value) {

    $query = db_merge('ebay_commerce_currency')
      ->key(array('currency' => $values[$key]['currency']))
      ->fields((array) $values[$key]);

    try {
      $query->execute();
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage());
    }
  }

}

/**
 * Save eBay URL information.
 */
function ebay_commerce_save_url() {

  $values = ebay_commerce_get_url();

  foreach ($values as $key => $value) {

    $query = db_merge('ebay_commerce_url')
      ->key(array('urltype' => $values[$key]['urltype']))
      ->fields((array) $values[$key]);

    try {
      $query->execute();
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage());
    }
  }

}

/**
 * Execute all save functions.
 *
 * @code
 * $result = ebay_commerce_save_values();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 */
function ebay_commerce_save_values() {
  ebay_commerce_save_site();
  ebay_commerce_save_country();
  ebay_commerce_save_currency();
  ebay_commerce_save_url();
}

/**
 * Load ebay sites from the database.
 *
 * @code
 * $result = ebay_commerce_load_site();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return string
 *    eBay sites.
 */
function ebay_commerce_load_site() {
  $query = db_select('ebay_commerce_sites', 'a')
    ->fields('a', array('siteid', 'site'));
  $result = $query->execute();
  $count = $query->countQuery()->execute()->fetchField();
  if ($count == 0) {
    ebay_commerce_save_site();
    $result = $query->execute();
  }
  return $result;
}

/**
 * Load ebay country from the database.
 *
 * @code
 * $result = ebay_commerce_load_country();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return string
 *   ebay Country.
 */
function ebay_commerce_load_country() {
  $query = db_select('ebay_commerce_country', 'a')
    ->fields('a', array('country', 'description'));
  $result = $query->execute();
  $count = $query->countQuery()->execute()->fetchField();
  if ($count == 0) {
    ebay_commerce_save_country();
    $result = $query->execute();
  }
  return $result;
}

/**
 * Load ebay currency from the database.
 *
 * @code
 * $result = ebay_commerce_load_currency();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return string
 *    eBay currency.
 */
function ebay_commerce_load_currency() {
  $query = db_select('ebay_commerce_currency', 'a')
    ->fields('a', array('currency', 'description'));
  $result = $query->execute();
  $count = $query->countQuery()->execute()->fetchField();
  if ($count == 0) {
    ebay_commerce_save_currency();
    $result = $query->execute();
  }
  return $result;
}

/**
 * Load ebay url from the database.
 *
 * @code
 * $result = ebay_commerce_load_url();
 *   foreach ($result as $record) {
 *     dsm($record);
 *   }
 * @endcode
 *
 * @return string
 *    eBay URL.
 */
function ebay_commerce_load_url() {
  $query = db_select('ebay_commerce_url', 'a')
    ->fields('a', array('urltype', 'url'));
  $result = $query->execute();
  $count = $query->countQuery()->execute()->fetchField();
  if ($count == 0) {
    ebay_commerce_save_url();
    $result = $query->execute();
  }
  return $result;
}
